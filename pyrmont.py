"""
Rainmeter skin code generator.
--> skin.pyrm
...
;macro
for i in range(25):
    print(f'''
    [MeasureBand{i}]
        Measure=Plugin
        Plugin=AudioLevel
        Parent=MeasureAudio
        Type=Band
        BandIdx={i}
    ''')
...
;endmacro
--> skin.ini
...
[MeasureBand0]
    Measure=Plugin
    Plugin=AudioLevel
    Parent=MeasureAudio
    Type=Band
    BandIdx=0
... (25 times as above)
"""

from pathlib import Path


class Macro:
    def __init__(self, lines, pyrm_path: Path):
        cur_path = pyrm_path.parent
        self.code = (
            f"""
__temp__pyrmont__ = []
CURRENTPATH = '{cur_path}'
def print(*args):
    global __temp__pyrmont__
    for arg in args:
        __temp__pyrmont__.append(arg)
def import_module(file_name):
    global CURRENTPATH
    import importlib.util as imp
    import os.path
    spec = imp.spec_from_file_location("module.name", os.path.join(CURRENTPATH, file_name + ".py"))
    module = imp.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module
"""
            + "".join(lines)
            + """
pyrmont_macro_output = __temp__pyrmont__
"""
        )


def find_pyrms_in(directory):
    """
    Finds all .pyrm files in directory (recursive)
    """
    return [x for x in directory.rglob("*.pyrm")]


def pyrm_to_ini(file: Path):
    """
    Generates .ini file from .pyrm file.
    """
    import io

    try:
        f = io.open(str(file), encoding="utf-16")
        in_lines = f.readlines()
    except UnicodeDecodeError:
        f = open(str(file))
        in_lines = f.readlines()
    f.close()

    out_lines = read_pyrm_lines(in_lines, file)
    out_file = file.with_suffix(".ini")

    f = io.open(str(out_file), "w+", newline="", encoding="utf-16")
    write_to_ini(f, out_lines)
    f.close()


def read_pyrm_lines(in_lines, pyrm_path: Path):
    """
    Reads .pyrm file line-by-line and wraps
    all found macros into objects.
    """
    out_lines = []
    gen_span_start = -1
    in_span = False
    for i, raw_line in enumerate(in_lines):
        line = raw_line.strip()
        if line == ";macro":
            if in_span:
                raise Exception("Macros cannot be nested.")
            in_span = True
            gen_span_start = i
        elif in_span:
            if line == ";endmacro":
                in_span = False
                out_lines.append(Macro(in_lines[gen_span_start + 1 : i], pyrm_path))
        else:
            out_lines.append(raw_line)
    return out_lines


def write_to_ini(f, out_lines):
    """
    Writes pyrmont-generated lines
    to resulting .ini file.
    """
    import inspect

    f.write("; This file was autogenerated with pyrmont.\n")
    f.write("; It's not recommended to edit this file manually.\n")
    for line in out_lines:
        if isinstance(line, Macro):
            result = {}
            exec(line.code, globals(), result)
            f.write(inspect.cleandoc("".join(result["pyrmont_macro_output"])))
        else:
            f.write(line)


if __name__ == "__main__":
    import sys
    import logging

    logging.basicConfig(format="%(message)s", level=logging.INFO)

    # processing arguments
    if len(sys.argv) < 2:
        logging.error(
            "1-st argument should be a path to Rainmeter skin pack directory."
        )
        exit(1)
    skin_dir = Path(sys.argv[1])
    if not skin_dir.exists():
        logging.error("Specified directory does not exists.")
        exit(1)

    if len(sys.argv) > 2 and "silent" in sys.argv[2]:
        logging.getLogger().setLevel(logging.ERROR)

    logging.info(
        r"""
                                        _
                                       | |
 _ __  _   _ _ __ _ __ ___   ___  _ __ | |_
| '_ \| | | | '__| '_ ` _ \ / _ \| '_ \| __|
| |_) | |_| | |  | | | | | | (_) | | | | |_
| .__/ \__, |_|  |_| |_| |_|\___/|_| |_|\__|
| |     __/ |
|_|    |___/                     by @f1uctus
"""[
            1:
        ]
    )

    logging.info("Working in " + str(skin_dir))
    logging.info("Processing .pyrm's:")
    pyrms = find_pyrms_in(skin_dir)
    for pyrm in pyrms:
        logging.info(str(pyrm))
        pyrm_to_ini(pyrm)
    logging.info("All done ;)")
